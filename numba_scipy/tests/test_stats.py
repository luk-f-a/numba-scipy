from numba_scipy.stats import norm
from numba_scipy.stats._continuous_distns import norm_gen

from scipy.stats import norm as scipy_norm
from numba import njit
import numpy as np
import unittest


class TestNorm(unittest.TestCase):
    @unittest.expectedFailure
    def test_rvs_keyword_args(self):
        """
        tests rvs generated by numba-scipy bitwise against scipy,
        based on Numpy's pre-1.17 global randomstate

        expected to fail due to issue #17
        """
        rv = norm_gen(seed=0).rvs(size=20)
        np.random.seed(0)
        rv_sc = scipy_norm.rvs(size=20)
        self.assertTrue(np.array_equal(rv, rv_sc))

    def test_rvs_pos_args(self):
        """
        tests rvs generated by numba-scipy bitwise against scipy,
        based on Numpy's pre-1.17 global randomstate


        """
        rv = norm_gen(seed=0).rvs((), 0, 1, 20)
        np.random.seed(0)
        rv_sc = scipy_norm.rvs(size=20)
        self.assertTrue(np.array_equal(rv, rv_sc))

    def test_rvs_basic_unseeded(self):
        """
        basic check for shape, etc

        """
        rv = norm.rvs((), 0, 1, 10)
        self.assertEqual(rv.shape,(10,))
        self.assertLess(rv.mean(), 10)
        self.assertGreater(rv.mean(), -10)

if __name__ == '__main__':
    unittest.main()